name: Deploy JSDoc Documentation to Vercel

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch: # Permite la ejecución manual

jobs:
  generate_and_deploy_docs:
    runs-on: ubuntu-latest
    
    # Opcional: Establece un entorno para un mejor seguimiento en GitHub
    environment:
      name: documentation
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: 🛑 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Install JSDoc and Vercel CLI
        # Instalamos las herramientas que necesitamos globalmente
        run: |
          npm install -g jsdoc 
          npm install -g vercel

      - name: 📄 Generate JSDoc Documentation
        run: |
          # Crea la carpeta 'docs' y genera el HTML de documentación
          mkdir -p docs 
          jsdoc js -r -d docs

      # --- DESPLIEGUE A VERCEL ---
      - name: 🌐 Deploy Documentation to Vercel
        id: deploy
        run: |
          # 1. AUTENTICACIÓN: (Este paso ya funciona)
          vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}

          # 2. DESPLIEGUE: Pasamos la variable de entorno para forzar el despliegue estático 
          # y usamos la barra invertida para la concatenación correcta.
          OUTPUT=$(vercel deploy ./docs --prod --prebuilt --yes \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --project ${{ secrets.VERCEL_PROJECT_ID }} \
            --build-env VERCEL_FORCE_NO_BUILD=1) # Nuevo argumento clave
            
          echo "Vercel deployment URL: $OUTPUT"
          
          # 3. OUTPUT: Captura la URL del despliegue.
          echo "url=$(echo $OUTPUT | tail -n 1)" >> $GITHUB_OUTPUT
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
